// Code generated by go-swagger; DO NOT EDIT.

package dhcp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeleteDHCPSubnetReservationParams creates a new DeleteDHCPSubnetReservationParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeleteDHCPSubnetReservationParams() *DeleteDHCPSubnetReservationParams {
	return &DeleteDHCPSubnetReservationParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteDHCPSubnetReservationParamsWithTimeout creates a new DeleteDHCPSubnetReservationParams object
// with the ability to set a timeout on a request.
func NewDeleteDHCPSubnetReservationParamsWithTimeout(timeout time.Duration) *DeleteDHCPSubnetReservationParams {
	return &DeleteDHCPSubnetReservationParams{
		timeout: timeout,
	}
}

// NewDeleteDHCPSubnetReservationParamsWithContext creates a new DeleteDHCPSubnetReservationParams object
// with the ability to set a context for a request.
func NewDeleteDHCPSubnetReservationParamsWithContext(ctx context.Context) *DeleteDHCPSubnetReservationParams {
	return &DeleteDHCPSubnetReservationParams{
		Context: ctx,
	}
}

// NewDeleteDHCPSubnetReservationParamsWithHTTPClient creates a new DeleteDHCPSubnetReservationParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeleteDHCPSubnetReservationParamsWithHTTPClient(client *http.Client) *DeleteDHCPSubnetReservationParams {
	return &DeleteDHCPSubnetReservationParams{
		HTTPClient: client,
	}
}

/*
DeleteDHCPSubnetReservationParams contains all the parameters to send to the API endpoint

	for the delete d h c p subnet reservation operation.

	Typically these are written to a http.Request.
*/
type DeleteDHCPSubnetReservationParams struct {

	/* MacID.

	   The hardware MAC address of the reservation to delete.
	*/
	MacID string

	/* SubnetID.

	   The ID of the subnet's reservation to delete.
	*/
	SubnetID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete d h c p subnet reservation params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteDHCPSubnetReservationParams) WithDefaults() *DeleteDHCPSubnetReservationParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete d h c p subnet reservation params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteDHCPSubnetReservationParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the delete d h c p subnet reservation params
func (o *DeleteDHCPSubnetReservationParams) WithTimeout(timeout time.Duration) *DeleteDHCPSubnetReservationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete d h c p subnet reservation params
func (o *DeleteDHCPSubnetReservationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete d h c p subnet reservation params
func (o *DeleteDHCPSubnetReservationParams) WithContext(ctx context.Context) *DeleteDHCPSubnetReservationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete d h c p subnet reservation params
func (o *DeleteDHCPSubnetReservationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete d h c p subnet reservation params
func (o *DeleteDHCPSubnetReservationParams) WithHTTPClient(client *http.Client) *DeleteDHCPSubnetReservationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete d h c p subnet reservation params
func (o *DeleteDHCPSubnetReservationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMacID adds the macID to the delete d h c p subnet reservation params
func (o *DeleteDHCPSubnetReservationParams) WithMacID(macID string) *DeleteDHCPSubnetReservationParams {
	o.SetMacID(macID)
	return o
}

// SetMacID adds the macId to the delete d h c p subnet reservation params
func (o *DeleteDHCPSubnetReservationParams) SetMacID(macID string) {
	o.MacID = macID
}

// WithSubnetID adds the subnetID to the delete d h c p subnet reservation params
func (o *DeleteDHCPSubnetReservationParams) WithSubnetID(subnetID string) *DeleteDHCPSubnetReservationParams {
	o.SetSubnetID(subnetID)
	return o
}

// SetSubnetID adds the subnetId to the delete d h c p subnet reservation params
func (o *DeleteDHCPSubnetReservationParams) SetSubnetID(subnetID string) {
	o.SubnetID = subnetID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteDHCPSubnetReservationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param macID
	if err := r.SetPathParam("macID", o.MacID); err != nil {
		return err
	}

	// path param subnetId
	if err := r.SetPathParam("subnetId", o.SubnetID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
