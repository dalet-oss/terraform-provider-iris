// Code generated by go-swagger; DO NOT EDIT.

package dhcp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new dhcp API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for dhcp API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateDHCPSubnet(params *CreateDHCPSubnetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDHCPSubnetCreated, error)

	CreateDHCPSubnetReservation(params *CreateDHCPSubnetReservationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDHCPSubnetReservationCreated, error)

	DeleteDHCPSubnet(params *DeleteDHCPSubnetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDHCPSubnetOK, error)

	DeleteDHCPSubnetReservation(params *DeleteDHCPSubnetReservationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDHCPSubnetReservationOK, error)

	DisableDHCP(params *DisableDHCPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DisableDHCPCreated, error)

	EnableDHCP(params *EnableDHCPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnableDHCPCreated, error)

	GetAllDHCPSubnetReservations(params *GetAllDHCPSubnetReservationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllDHCPSubnetReservationsOK, error)

	GetAllDHCPSubnets(params *GetAllDHCPSubnetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllDHCPSubnetsOK, error)

	GetDHCPStatus(params *GetDHCPStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDHCPStatusOK, error)

	GetDHCPSubnet(params *GetDHCPSubnetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDHCPSubnetOK, error)

	GetDHCPSubnetReservation(params *GetDHCPSubnetReservationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDHCPSubnetReservationOK, error)

	ReloadDHCP(params *ReloadDHCPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReloadDHCPCreated, error)

	UpdateDHCPSubnet(params *UpdateDHCPSubnetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDHCPSubnetOK, error)

	UpdateDHCPSubnetReservation(params *UpdateDHCPSubnetReservationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDHCPSubnetReservationOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateDHCPSubnet Creates a new DHCPv4 subnet.
*/
func (a *Client) CreateDHCPSubnet(params *CreateDHCPSubnetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDHCPSubnetCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDHCPSubnetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateDHCPSubnet",
		Method:             "POST",
		PathPattern:        "/dhcp/subnet",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDHCPSubnetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDHCPSubnetCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateDHCPSubnet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateDHCPSubnetReservation Creates a new DHCPv4 subnet's reservation.
*/
func (a *Client) CreateDHCPSubnetReservation(params *CreateDHCPSubnetReservationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDHCPSubnetReservationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDHCPSubnetReservationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateDHCPSubnetReservation",
		Method:             "POST",
		PathPattern:        "/dhcp/subnet/{subnetId}/reservation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDHCPSubnetReservationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDHCPSubnetReservationCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateDHCPSubnetReservation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteDHCPSubnet Deletes an existing subnet.
*/
func (a *Client) DeleteDHCPSubnet(params *DeleteDHCPSubnetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDHCPSubnetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDHCPSubnetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteDHCPSubnet",
		Method:             "DELETE",
		PathPattern:        "/dhcp/subnet/{subnetId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDHCPSubnetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDHCPSubnetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteDHCPSubnet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteDHCPSubnetReservation Deletes an existing subnet's reservation.
*/
func (a *Client) DeleteDHCPSubnetReservation(params *DeleteDHCPSubnetReservationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDHCPSubnetReservationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDHCPSubnetReservationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteDHCPSubnetReservation",
		Method:             "DELETE",
		PathPattern:        "/dhcp/subnet/{subnetId}/reservation/{macID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDHCPSubnetReservationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDHCPSubnetReservationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteDHCPSubnetReservation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DisableDHCP Disable the DHCPv4 service.
*/
func (a *Client) DisableDHCP(params *DisableDHCPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DisableDHCPCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDisableDHCPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DisableDHCP",
		Method:             "POST",
		PathPattern:        "/dhcp/disable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DisableDHCPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DisableDHCPCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DisableDHCP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EnableDHCP Enable the DHCPv4 service.
*/
func (a *Client) EnableDHCP(params *EnableDHCPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnableDHCPCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnableDHCPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EnableDHCP",
		Method:             "POST",
		PathPattern:        "/dhcp/enable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EnableDHCPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnableDHCPCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EnableDHCP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllDHCPSubnetReservations Returns the list of MAC hardware addresses of subnet's reservations.
*/
func (a *Client) GetAllDHCPSubnetReservations(params *GetAllDHCPSubnetReservationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllDHCPSubnetReservationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllDHCPSubnetReservationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAllDHCPSubnetReservations",
		Method:             "GET",
		PathPattern:        "/dhcp/subnet/{subnetId}/reservation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllDHCPSubnetReservationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllDHCPSubnetReservationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAllDHCPSubnetReservations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllDHCPSubnets Returns the IDs of DHCPv4 registered subnets.
*/
func (a *Client) GetAllDHCPSubnets(params *GetAllDHCPSubnetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllDHCPSubnetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllDHCPSubnetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAllDHCPSubnets",
		Method:             "GET",
		PathPattern:        "/dhcp/subnet",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllDHCPSubnetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllDHCPSubnetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAllDHCPSubnets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDHCPStatus Return the status of the DHCPv4 service.
*/
func (a *Client) GetDHCPStatus(params *GetDHCPStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDHCPStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDHCPStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDHCPStatus",
		Method:             "GET",
		PathPattern:        "/dhcp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDHCPStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDHCPStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDHCPStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDHCPSubnet Returns the requested DHCP Subnet object.
*/
func (a *Client) GetDHCPSubnet(params *GetDHCPSubnetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDHCPSubnetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDHCPSubnetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDHCPSubnet",
		Method:             "GET",
		PathPattern:        "/dhcp/subnet/{subnetId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDHCPSubnetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDHCPSubnetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDHCPSubnet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDHCPSubnetReservation Returns the subnet reservation object.
*/
func (a *Client) GetDHCPSubnetReservation(params *GetDHCPSubnetReservationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDHCPSubnetReservationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDHCPSubnetReservationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDHCPSubnetReservation",
		Method:             "GET",
		PathPattern:        "/dhcp/subnet/{subnetId}/reservation/{macID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDHCPSubnetReservationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDHCPSubnetReservationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDHCPSubnetReservation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReloadDHCP Reload the DHCPv4 service configuration.
*/
func (a *Client) ReloadDHCP(params *ReloadDHCPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReloadDHCPCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReloadDHCPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReloadDHCP",
		Method:             "POST",
		PathPattern:        "/dhcp/reload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReloadDHCPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReloadDHCPCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReloadDHCP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateDHCPSubnet Updates a DHCPv4 subnet configuration.
*/
func (a *Client) UpdateDHCPSubnet(params *UpdateDHCPSubnetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDHCPSubnetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDHCPSubnetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateDHCPSubnet",
		Method:             "PUT",
		PathPattern:        "/dhcp/subnet/{subnetId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDHCPSubnetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDHCPSubnetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateDHCPSubnet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateDHCPSubnetReservation Updates a DHCPv4 subnet reservation.
*/
func (a *Client) UpdateDHCPSubnetReservation(params *UpdateDHCPSubnetReservationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDHCPSubnetReservationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDHCPSubnetReservationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateDHCPSubnetReservation",
		Method:             "PUT",
		PathPattern:        "/dhcp/subnet/{subnetId}/reservation/{macID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDHCPSubnetReservationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDHCPSubnetReservationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateDHCPSubnetReservation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
