// Code generated by go-swagger; DO NOT EDIT.

package dhcp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/dalet-oss/terraform-provider-iris/models"
)

// UpdateDHCPSubnetReservationReader is a Reader for the UpdateDHCPSubnetReservation structure.
type UpdateDHCPSubnetReservationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateDHCPSubnetReservationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateDHCPSubnetReservationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateDHCPSubnetReservationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateDHCPSubnetReservationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateDHCPSubnetReservationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateDHCPSubnetReservationOK creates a UpdateDHCPSubnetReservationOK with default headers values
func NewUpdateDHCPSubnetReservationOK() *UpdateDHCPSubnetReservationOK {
	return &UpdateDHCPSubnetReservationOK{}
}

/*
UpdateDHCPSubnetReservationOK describes a response with status code 200, with default header values.

Returns the updated Reservation object.
*/
type UpdateDHCPSubnetReservationOK struct {
	Payload *models.Reservation
}

// IsSuccess returns true when this update d h c p subnet reservation o k response has a 2xx status code
func (o *UpdateDHCPSubnetReservationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update d h c p subnet reservation o k response has a 3xx status code
func (o *UpdateDHCPSubnetReservationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update d h c p subnet reservation o k response has a 4xx status code
func (o *UpdateDHCPSubnetReservationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update d h c p subnet reservation o k response has a 5xx status code
func (o *UpdateDHCPSubnetReservationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update d h c p subnet reservation o k response a status code equal to that given
func (o *UpdateDHCPSubnetReservationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update d h c p subnet reservation o k response
func (o *UpdateDHCPSubnetReservationOK) Code() int {
	return 200
}

func (o *UpdateDHCPSubnetReservationOK) Error() string {
	return fmt.Sprintf("[PUT /dhcp/subnet/{subnetId}/reservation/{macID}][%d] updateDHCPSubnetReservationOK  %+v", 200, o.Payload)
}

func (o *UpdateDHCPSubnetReservationOK) String() string {
	return fmt.Sprintf("[PUT /dhcp/subnet/{subnetId}/reservation/{macID}][%d] updateDHCPSubnetReservationOK  %+v", 200, o.Payload)
}

func (o *UpdateDHCPSubnetReservationOK) GetPayload() *models.Reservation {
	return o.Payload
}

func (o *UpdateDHCPSubnetReservationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Reservation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDHCPSubnetReservationBadRequest creates a UpdateDHCPSubnetReservationBadRequest with default headers values
func NewUpdateDHCPSubnetReservationBadRequest() *UpdateDHCPSubnetReservationBadRequest {
	return &UpdateDHCPSubnetReservationBadRequest{}
}

/*
UpdateDHCPSubnetReservationBadRequest describes a response with status code 400, with default header values.

Bad parameters were provided.
*/
type UpdateDHCPSubnetReservationBadRequest struct {
}

// IsSuccess returns true when this update d h c p subnet reservation bad request response has a 2xx status code
func (o *UpdateDHCPSubnetReservationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update d h c p subnet reservation bad request response has a 3xx status code
func (o *UpdateDHCPSubnetReservationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update d h c p subnet reservation bad request response has a 4xx status code
func (o *UpdateDHCPSubnetReservationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update d h c p subnet reservation bad request response has a 5xx status code
func (o *UpdateDHCPSubnetReservationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update d h c p subnet reservation bad request response a status code equal to that given
func (o *UpdateDHCPSubnetReservationBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update d h c p subnet reservation bad request response
func (o *UpdateDHCPSubnetReservationBadRequest) Code() int {
	return 400
}

func (o *UpdateDHCPSubnetReservationBadRequest) Error() string {
	return fmt.Sprintf("[PUT /dhcp/subnet/{subnetId}/reservation/{macID}][%d] updateDHCPSubnetReservationBadRequest ", 400)
}

func (o *UpdateDHCPSubnetReservationBadRequest) String() string {
	return fmt.Sprintf("[PUT /dhcp/subnet/{subnetId}/reservation/{macID}][%d] updateDHCPSubnetReservationBadRequest ", 400)
}

func (o *UpdateDHCPSubnetReservationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateDHCPSubnetReservationNotFound creates a UpdateDHCPSubnetReservationNotFound with default headers values
func NewUpdateDHCPSubnetReservationNotFound() *UpdateDHCPSubnetReservationNotFound {
	return &UpdateDHCPSubnetReservationNotFound{}
}

/*
UpdateDHCPSubnetReservationNotFound describes a response with status code 404, with default header values.

Invalid subnet ID or reservation MAC address was provided.
*/
type UpdateDHCPSubnetReservationNotFound struct {
}

// IsSuccess returns true when this update d h c p subnet reservation not found response has a 2xx status code
func (o *UpdateDHCPSubnetReservationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update d h c p subnet reservation not found response has a 3xx status code
func (o *UpdateDHCPSubnetReservationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update d h c p subnet reservation not found response has a 4xx status code
func (o *UpdateDHCPSubnetReservationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update d h c p subnet reservation not found response has a 5xx status code
func (o *UpdateDHCPSubnetReservationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update d h c p subnet reservation not found response a status code equal to that given
func (o *UpdateDHCPSubnetReservationNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update d h c p subnet reservation not found response
func (o *UpdateDHCPSubnetReservationNotFound) Code() int {
	return 404
}

func (o *UpdateDHCPSubnetReservationNotFound) Error() string {
	return fmt.Sprintf("[PUT /dhcp/subnet/{subnetId}/reservation/{macID}][%d] updateDHCPSubnetReservationNotFound ", 404)
}

func (o *UpdateDHCPSubnetReservationNotFound) String() string {
	return fmt.Sprintf("[PUT /dhcp/subnet/{subnetId}/reservation/{macID}][%d] updateDHCPSubnetReservationNotFound ", 404)
}

func (o *UpdateDHCPSubnetReservationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateDHCPSubnetReservationInternalServerError creates a UpdateDHCPSubnetReservationInternalServerError with default headers values
func NewUpdateDHCPSubnetReservationInternalServerError() *UpdateDHCPSubnetReservationInternalServerError {
	return &UpdateDHCPSubnetReservationInternalServerError{}
}

/*
UpdateDHCPSubnetReservationInternalServerError describes a response with status code 500, with default header values.

Unable to update subnet's reservation.
*/
type UpdateDHCPSubnetReservationInternalServerError struct {
}

// IsSuccess returns true when this update d h c p subnet reservation internal server error response has a 2xx status code
func (o *UpdateDHCPSubnetReservationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update d h c p subnet reservation internal server error response has a 3xx status code
func (o *UpdateDHCPSubnetReservationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update d h c p subnet reservation internal server error response has a 4xx status code
func (o *UpdateDHCPSubnetReservationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update d h c p subnet reservation internal server error response has a 5xx status code
func (o *UpdateDHCPSubnetReservationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update d h c p subnet reservation internal server error response a status code equal to that given
func (o *UpdateDHCPSubnetReservationInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update d h c p subnet reservation internal server error response
func (o *UpdateDHCPSubnetReservationInternalServerError) Code() int {
	return 500
}

func (o *UpdateDHCPSubnetReservationInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /dhcp/subnet/{subnetId}/reservation/{macID}][%d] updateDHCPSubnetReservationInternalServerError ", 500)
}

func (o *UpdateDHCPSubnetReservationInternalServerError) String() string {
	return fmt.Sprintf("[PUT /dhcp/subnet/{subnetId}/reservation/{macID}][%d] updateDHCPSubnetReservationInternalServerError ", 500)
}

func (o *UpdateDHCPSubnetReservationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
